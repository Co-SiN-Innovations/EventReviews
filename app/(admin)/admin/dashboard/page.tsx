"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Calendar, MessageSquare, PlusCircle, Users } from "lucide-react"
import { getAllEvents } from "@/lib/firebase/events"
import { getAllReviews } from "@/lib/firebase/reviews"
import { getAllUsers } from "@/lib/firebase/users"
import type { Event } from "@/lib/data"

export default function AdminDashboard() {
  const [events, setEvents] = useState<Event[]>([])
  const [recentEvents, setRecentEvents] = useState<Event[]>([])
  const [totalReviews, setTotalReviews] = useState(0)
  const [totalUsers, setTotalUsers] = useState(0)
  const [avgRating, setAvgRating] = useState(0)
  const [isLoading, setIsLoading] = useState(true)

  // Fetch data on component mount
  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true)

        // Fetch events, reviews, and users
        const allEvents = await getAllEvents()
        const activeEvents = allEvents.filter((event) => event.status === "active")
        const reviews = await getAllReviews()
        const allUsers = await getAllUsers()

        // Filter out auto-generated users
        const registeredUsers = allUsers.filter((user) => !user.isAutoGenerated)

        // Set events data
        setEvents(activeEvents)

        // Set recent events (most recently created first)
        const sortedEvents = [...activeEvents].sort(
          (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),
        )
        setRecentEvents(sortedEvents.slice(0, 4))

        // Set total reviews
        setTotalReviews(reviews.length)

        // Set total users (only registered users, not auto-generated)
        setTotalUsers(registeredUsers.length)

        // Calculate average rating
        if (reviews.length > 0) {
          const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0)
          setAvgRating(totalRating / reviews.length)
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error)
      } finally {
        setIsLoading(false)
      }
    }

    fetchData()
  }, [])

  return (
    <div className="flex flex-col gap-4">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold text-orange">Admin Dashboard</h1>
        <Link href="/admin/events/create">
          <Button className="gap-2 bg-blue hover:bg-blue/90 shadow-md hover-lift">
            <PlusCircle className="h-4 w-4" />
            Create Event
          </Button>
        </Link>
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card className="border-gold/20 shadow-md">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Events</CardTitle>
            <Calendar className="h-4 w-4 text-orange" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue">{isLoading ? "..." : events.length}</div>
            <p className="text-xs text-muted-foreground">Active events</p>
          </CardContent>
        </Card>
        <Card className="border-gold/20 shadow-md">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Reviews</CardTitle>
            <MessageSquare className="h-4 w-4 text-orange" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue">{isLoading ? "..." : totalReviews}</div>
            <p className="text-xs text-muted-foreground">Across all events</p>
          </CardContent>
        </Card>
        <Card className="border-gold/20 shadow-md">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Registered Users</CardTitle>
            <Users className="h-4 w-4 text-orange" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue">{isLoading ? "..." : totalUsers}</div>
            <p className="text-xs text-muted-foreground">Total registered users</p>
          </CardContent>
        </Card>
        <Card className="border-gold/20 shadow-md">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Avg. Rating</CardTitle>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              className="h-4 w-4 text-orange"
            >
              <path d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6" />
            </svg>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue">{isLoading ? "..." : avgRating.toFixed(1)}</div>
            <p className="text-xs text-muted-foreground">From event reviews</p>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Recent Events</CardTitle>
          <CardDescription>Recently created events</CardDescription>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="flex items-center justify-center py-8">
              <Calendar className="h-8 w-8 animate-spin text-primary mr-2" />
              <span>Loading events...</span>
            </div>
          ) : recentEvents.length > 0 ? (
            <div className="space-y-4">
              {recentEvents.map((event) => (
                <div
                  key={event.id}
                  className="flex items-center gap-4 hover:bg-lightgray/50 p-2 rounded-md transition-colors"
                >
                  <div className="w-12 h-12 rounded-md bg-gold/20 flex items-center justify-center">
                    <Calendar className="h-6 w-6 text-orange" />
                  </div>
                  <div className="space-y-1">
                    <p className="font-medium leading-none text-blue">{event.title}</p>
                    <p className="text-sm text-muted-foreground">
                      {new Date(event.date).toLocaleDateString()} â€¢ {event.location}
                    </p>
                  </div>
                  <div className="ml-auto">
                    <Link href={`/admin/events/${event.id}`}>
                      <Button variant="outline" size="sm">
                        View
                      </Button>
                    </Link>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center py-8 text-center">
              <Calendar className="h-10 w-10 text-gold mb-2" />
              <p className="text-muted-foreground">No events created yet</p>
              <Link href="/admin/events/create" className="mt-4">
                <Button size="sm" className="bg-orange hover:bg-orange/90 shadow-sm">
                  Create Your First Event
                </Button>
              </Link>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

